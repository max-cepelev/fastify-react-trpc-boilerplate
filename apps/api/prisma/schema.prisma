// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "../src/models" // default is ./generated/zod
  useMultipleFiles          = true // default is false
  createRelationValuesTypes = true // default is false
  createInputTypes          = false // default is true
}

model Log {
  id          Int      @id @default(autoincrement())
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([userId], name: "idx_log_user_id")
  @@map("logs")
}

model Customer {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  email     String?  @db.VarChar(255)
  inn       String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
  prices    Price[]

  @@map("customers")
}

enum PriceColumns {
  DecorPrice    @map("DECOR_PRICE")
  SquarePrice   @map("SQUARE_PRICE")
  DiscountPrice @map("DISCOUNT_PRICE")
  LayoutImg     @map("LAYOUT_IMG")
  Floor         @map("FLOOR")
  Roominess     @map("ROOMINESS")
  TotalArea     @map("TOTAL_AREA")
}

enum PriceSource {
  Macro       @map("MACRO")
  Spreadsheet @map("SPREADSHEET")
}

model Price {
  slug       String         @id @default(uuid()) @db.VarChar(255)
  columns    PriceColumns[]
  source     PriceSource
  cacheTime  Int?           @default(3600) @map("cache_time")
  sourceUrl  String?        @map("source_url")
  title      String?        @map("title")
  titleImg   String?        @map("title_img")
  decorPrice Float?         @map("decor_price")
  userId     String         @map("user_id") @db.Uuid
  user       User           @relation(fields: [userId], references: [id])
  customerId String?        @map("customer_id")
  customer   Customer?      @relation(fields: [customerId], references: [id])
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  @@index([userId], name: "idx_price_user_id")
  @@index([customerId], name: "idx_price_customer_id")
  @@map("prices")
}

enum Permission {
  Edit   @map("EDIT")
  View   @map("VIEW")
  Admin  @map("ADMIN")
  Delete @map("DELETE")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  username      String         @unique @db.VarChar(255)
  email         String?        @unique @db.VarChar(255)
  isAdmin       Boolean        @default(false) @map("is_admin")
  name          String?        @db.VarChar(255)
  phone         String?        @db.VarChar(255)
  password      String         @db.VarChar(255)
  permissions   Permission[]   @default([])
  fileSizeLimit Float          @default(1000000)
  logs          Log[]
  buildingIds   Int[]          @default([]) @map("building_ids")
  customer      Customer?      @relation(fields: [customerId], references: [id])
  customerId    String?        @map("customer_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  profile       Profile?
  subscriptions Subscription[]
  prices        Price[]

  @@index([email], name: "idx_user_email")
  @@index([customerId], name: "idx_user_customer_id")
  @@map("users")
}

model Profile {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @unique @map("user_id") @db.Uuid
  user            User      @relation(fields: [userId], references: [id])
  about           String?
  telegram        String?   @db.VarChar(255)
  photo           String?   @db.VarChar(255)
  dateOfBirth     DateTime? @map("date_of_birth") @db.Date
  careerStartDate DateTime? @map("career_start_date") @db.Date
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  @@index([userId], name: "idx_profile_user_id")
  @@map("profiles")
}

enum SubscriptionType {
  Free    @map("FREE")
  Basic   @map("BASIC")
  Premium @map("PREMIUM")
}

enum SubscriptionStatus {
  Active   @map("ACTIVE")
  Canceled @map("CANCELED")
  Inactive @map("INACTIVE")
}

model Subscription {
  id        Int                @id @default(autoincrement())
  userId    String             @map("user_id") @db.Uuid
  user      User               @relation(fields: [userId], references: [id])
  type      SubscriptionType
  startDate DateTime           @default(now()) @map("start_date")
  endDate   DateTime           @map("end_date")
  status    SubscriptionStatus @default(Active)

  @@index([userId], name: "idx_subscription_user_id")
  @@map("subscriptions")
}
